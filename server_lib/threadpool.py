 Simple thread pool stubs.\n\nfrom queue import Queue\nfrom threading import Thread, Event\nfrom typing import Callable, Any\n\nclass ThreadPool:\n def __init__(self, num_workers: int = 4):\n self._tasks: Queue[tuple[Callable[..., Any], tuple, dict]] = Queue()\n self._stop = Event()\n self._workers = [Thread(target=self._worker, daemon=True) for _ in range(num_workers)]\n for w in self._workers:\n w.start()\n\n def submit(self, fn: Callable[..., Any], *args, **kwargs) -> None:\n self._tasks.put((fn, args, kwargs))\n\n def shutdown(self, wait: bool = True) -> None:\n self._stop.set()\n for _ in self._workers:\n self._tasks.put((lambda: None, (), {}))\n if wait:\n for w in self._workers:\n w.join()\n\n def _worker(self) -> None:\n while not self._stop.is_set():\n fn, args, kwargs = self._tasks.get()\n try:\n fn(*args, **kwargs)\n finally:\n self._tasks.task_done()\n